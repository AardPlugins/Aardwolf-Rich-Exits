<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
    <plugin
        name="Aardwolf_Rich_Exits"
        author="deathr"
        id="e1220a76fc60c20130b2af36"
        language="Lua"
        purpose="Converts room exits to hyperlinks and adds custom exits to the list of exits displayed"
        date_written="2024-11-22 11:44:14"
        save_state="y"
        requires="5.07"
        version="1.0">
    </plugin>

<!--
https://github.com/AardPlugins/Aardwolf-Rich-Exits 
-->

<!-- For local development: Load a separate Lua file
    <script>
<![CDATA[
dofile(GetPluginInfo(GetPluginID(), 20) .. "Aardwolf_Rich_Exits.lua")
]]>
    </script>
-->

    <script>
<![CDATA[
dofile(GetInfo(60) .. "aardwolf_colors.lua")

--
-- Variables
--

room_id = 0
exits = {}
cexits = {}

cexit_max_length_var_name = "exits_var_draw_cexit_max_length"
draw_underline_var_name = "exits_var_draw_underline"
cexit_multiline_var_name = "exits_var_cexit_multiline"
cexit_trim_commmon_var_name = "exits_var_cexit_trim_commmon"

cexit_north_var_name = "exits_var_cexit_north"
cexit_east_var_name = "exits_var_cexit_east"
cexit_south_var_name = "exits_var_cexit_south"
cexit_west_var_name = "exits_var_cexit_west"
cexit_up_var_name = "exits_var_cexit_up"
cexit_down_var_name = "exits_var_cexit_down"

cexit_max_length = tonumber(GetVariable(cexit_max_length_var_name)) or -1
draw_underline = tonumber(GetVariable(draw_underline_var_name)) or 1
cexit_multiline = tonumber(GetVariable(cexit_multiline_var_name)) or 0
cexit_trim_commmon = tonumber(GetVariable(cexit_trim_commmon_var_name)) or 0

cexit_north = GetVariable(cexit_north_var_name) or "open north;north"
cexit_east = GetVariable(cexit_east_var_name) or "open east;east"
cexit_south = GetVariable(cexit_south_var_name) or "open south;south"
cexit_west = GetVariable(cexit_west_var_name) or "open west;west"
cexit_up = GetVariable(cexit_up_var_name) or "open up;up"
cexit_down = GetVariable(cexit_down_var_name) or "open down;down"

--
-- Plugin Methods
--

local plugin_id_gmcp_handler = "3e7dedbe37e44942dd46d264"
local plugin_id_gmcp_mapper = "b6eae87ccedd84f510b74714"

function OnPluginBroadcast(msg, id, name, text)
    if (id == plugin_id_gmcp_handler) then
        if (text == "room.info") then
            on_room_info_update(gmcp("room.info"))
        end
    end
end

function OnPluginInstall()
    init_plugin()
end

function OnPluginConnect()
    init_plugin()
end

function OnPluginEnable()
    init_plugin()
end

function init_plugin()
    if not IsConnected() then
        return
    end

    -- Wait until tags can be called
    local current_state = gmcp("char.status.state")
    if ((current_state ~= "3") and (current_state ~= "8") and (current_state ~= "9") and (current_state ~= "11")) then
        return
    end

    EnableTimer("timer_init_plugin", false)
    Message("Enabled Plugin")
    SendNoEcho("tags exits on")
    on_room_info_update(gmcp("room.info"))
end

function gmcp(s)
    local ret, datastring = CallPlugin(plugin_id_gmcp_handler, "gmcpdata_as_string", s)
    pcall(loadstring("data = " .. datastring))
    return data
end

--
-- Help & Options
--

function alias_help(name, line, wildcards)
    Message([[@WCommands:@w

  @Wrexit help                 @w- Print out this help message
  @Wrexit options              @w- Print out the plugin options
  @Wrexit set maxlength @Ylength @w- Sets the maximum length of the cexit name to display, set to -1 to show all
  @Wrexit set underline        @w- Toggles displaying an underline in the hyperlinks
  @Wrexit set multiline        @w- Toggles displaying cexits on their own line
  @Wrexit set trimcommon       @w- Trims common words like say and enter from cexit names
  @Wrexit set cexit @Ydir cmd    @w- Set door opening cexit command for standard cardinal directions
  @Wcexit @Yindex                @w- Executes the cexit command based on index]])
end

function alias_options(name, line, wildcards)
    local options_draw_underline = "@RNo"
    if draw_underline == 1 then
        options_draw_underline = "@GYes"
    elseif draw_underline == nil then
        options_draw_underline = "@RNil"
    end

    local options_cexit_multiline = "@RNo"
    if cexit_multiline == 1 then
        options_cexit_multiline = "@GYes"
    elseif cexit_multiline == nil then
        options_cexit_multiline = "@RNil"
    end

    local options_cexit_trim_commmon = "@RNo"
    if cexit_trim_commmon == 1 then
        options_cexit_trim_commmon = "@GYes"
    elseif cexit_trim_commmon == nil then
        options_cexit_trim_commmon = "@RNil"
    end

    Message(string.format([[@WCurrent options:@w

  @WCexit Max Length: @w(%s@w)
  @WUnderline:        @w(%s@w)
  @WMultiline:        @w(%s@w)
  @WTrim common:      @w(%s@w)
  @WNorth Cexit:      @w(%s@w)
  @WEast Cexit:       @w(%s@w)
  @WSouth Cexit:      @w(%s@w)
  @WWest Cexit:       @w(%s@w)
  @WUp Cexit:         @w(%s@w)
  @WDown Cexit:       @w(%s@w)]],
    cexit_max_length,
    options_draw_underline,
    options_cexit_multiline,
    options_cexit_trim_commmon,
    cexit_north,
    cexit_east,
    cexit_south,
    cexit_west,
    cexit_up,
    cexit_down))
end

function alias_set_draw_underline(name, line, wildcards)
    local new_draw_underline = -1

    if draw_underline == 1 then
        new_draw_underline = 0
    else
        new_draw_underline = 1
    end

    if new_draw_underline == 0 then
        Message("@WExit hyperlinks will no longer have an underline")
    else
        Message("@WExit hyperlinks will now have an underline")
    end
    SetVariable(draw_underline_var_name, new_draw_underline)
    draw_underline = new_draw_underline
end

function alias_set_cexit_multiline(name, line, wildcards)
    local new_cexit_multiline = -1

    if cexit_multiline == 1 then
        new_cexit_multiline = 0
    else
        new_cexit_multiline = 1
    end

    if new_cexit_multiline == 0 then
        Message("@WCustom exits will now appear on same line as exits")
    else
        Message("@WCustom exits will now appear on their own line")
    end
    SetVariable(cexit_multiline_var_name, new_cexit_multiline)
    cexit_multiline = new_cexit_multiline
end

function alias_set_trim_common(name, line, wildcards)
    local new_cexit_trim_commmon = -1

    if cexit_trim_commmon == 1 then
        new_cexit_trim_commmon = 0
    else
        new_cexit_trim_commmon = 1
    end

    if new_cexit_trim_commmon == 0 then
        Message("@WNo longer removing common words from custom exits")
    else
        Message("@WCommon words will now be removed from custom exits")
    end
    SetVariable(cexit_trim_commmon_var_name, new_cexit_trim_commmon)
    cexit_trim_commmon = new_cexit_trim_commmon
end

function alias_set_max_length(name, line, wildcards)
    local new_max_length = tonumber(Trim(wildcards.max_length))
    if new_max_length == nil or new_max_length == 0 then
        Message("@WYou must specify a valid length.")
        return
    end

    if new_max_length < 0 then
        new_max_length = -1
        Message("@WThe full cexit name will now be displayed")
    else
        Message("@WCexit names will now automatically be truncated to @Y" .. new_max_length .. " @Wcharacters")
    end
    SetVariable(cexit_max_length_var_name, new_max_length)
    cexit_max_length = new_max_length
end

function alias_set_cexit_dir(name, line, wildcards)
    local dir = string.lower(wildcards.dir)
    local cmd = Trim(wildcards.cmd)

    if dir == "north" then
        SetVariable(cexit_north_var_name, cmd)
        cexit_north = cmd
    elseif dir == "east" then
        SetVariable(cexit_east_var_name, cmd)
        cexit_east = cmd
    elseif dir == "south" then
        SetVariable(cexit_south_var_name, cmd)
        cexit_south = cmd
    elseif dir == "west" then
        SetVariable(cexit_west_var_name, cmd)
        cexit_west = cmd
    elseif dir == "up" then
        SetVariable(cexit_up_var_name, cmd)
        cexit_up = cmd
    elseif dir == "down" then
        SetVariable(cexit_down_var_name, cmd)
        cexit_down = cmd
    else
        Message("@WInvalid direction")
        return
    end

    Message("@Y" .. dir .. " @Wcexit is now set to (@Y" .. cmd .. "@W)")
end

--
-- Main Code
--

function alias_cexit(name, line, wildcards)
    local index = tonumber(wildcards.index)
    local cexit = cexits[index]
    if cexit == nil then
        Message("Custom exit not found with index " .. index)
        return
    end
    Execute(cexit)
end

function on_room_info_update(room_info)
    if room_info.exits == nil then
        exits = {}
        cexits = {}
        return
    end

    room_id = tonumber(room_info.num)

    exits = {
        north = {
            cmd = "north",
            room_id = room_info.exits.n
        },
        east = {
            cmd = "east",
            room_id = room_info.exits.e
        },
        south = {
            cmd = "south",
            room_id = room_info.exits.s
        },
        west = {
            cmd = "west",
            room_id = room_info.exits.w
        },
        up = {
            cmd = "up",
            room_id = room_info.exits.u
        },
        down = {
            cmd = "down",
            room_id = room_info.exits.d
        },
    }

    -- Read custom exits from mapper plugin
    cexits = {}

    local rc, room_cexits = CallPlugin(plugin_id_gmcp_mapper, "room_cexits", roomid)
    if (rc == error_code.eOK) then
        local room_cexits = loadstring(string.format("return %s", room_cexits))()
        if room_cexits ~= nil then
            for k, v in pairs(room_cexits) do
                if k == cexit_north then
                    exits.north.cmd = k
                elseif k == cexit_east then
                    exits.east.cmd = k
                elseif k == cexit_south then
                    exits.south.cmd = k
                elseif k == cexit_west then
                    exits.west.cmd = k
                elseif k == cexit_up then
                    exits.up.cmd = k
                elseif k == cexit_down then
                    exits.down.cmd = k
                else
                    table.insert(cexits, {
                        text = k,
                        cmd = k,
                        room_id = v
                    })
                end
            end
        end
    end
end

function trigger_exits(name, line, wildcards, style)
    local no_underline = false
    if draw_underline == 0 then
        no_underline = true
    end

    local has_one_cardinal = false

    ColourTell("green", "", "[ Exits:")
    if exits.north.room_id ~= nil then
        has_one_cardinal = true
        ColourTell("green", "", " ")
        Hyperlink(exits.north.cmd, "north", "moves to " .. exits.north.room_id, "green", "", false, no_underline)
    end
    if exits.east.room_id ~= nil then
        has_one_cardinal = true
        ColourTell("green", "", " ")
        Hyperlink(exits.east.cmd, "east", "moves to " .. exits.east.room_id, "green", "", false, no_underline)
    end
    if exits.south.room_id ~= nil then
        has_one_cardinal = true
        ColourTell("green", "", " ")
        Hyperlink(exits.south.cmd, "south", "moves to " .. exits.south.room_id, "green", "", false, no_underline)
    end
    if exits.west.room_id ~= nil then
        has_one_cardinal = true
        ColourTell("green", "", " ")
        Hyperlink(exits.west.cmd, "west", "moves to " .. exits.west.room_id, "green", "", false, no_underline)
    end
    if exits.up.room_id ~= nil then
        has_one_cardinal = true
        ColourTell("green", "", " ")
        Hyperlink(exits.up.cmd, "up", "moves to " .. exits.up.room_id, "green", "", false, no_underline)
    end
    if exits.down.room_id ~= nil then
        has_one_cardinal = true
        ColourTell("green", "", " ")
        Hyperlink(exits.down.cmd, "down", "moves to " .. exits.down.room_id, "green", "", false, no_underline)
    end

    if cexit_multiline == 1 then
        if not has_one_cardinal then
            ColourTell("green", "", " none")
        end
        ColourTell("green", "", " ]")
        Note()
        if #cexits > 0 then
            ColourTell("green", "", "[ Cexits:")
        else
            Note()
            return
        end
    end

    for i, cexit in ipairs(cexits) do
        ColourTell("green", "", " ")
        local text = cexit.text

        if cexit_trim_commmon == 1 then
            text = Replace(text, "enter ", "", false)
            text = Replace(text, "say ", "", false)
        end

        if cexit_max_length > 0 then
            text = string.sub(text, 1, cexit_max_length)
        end
        if text:match("%s") then
            text = "'" .. text .. "'"
        end
        local hint = "'" .. cexit.text .. "' moves to " .. cexit.room_id
        Hyperlink(cexit.cmd, text, hint, "green", "", false, no_underline)
    end

    if not has_one_cardinal and #cexits <= 0 then
        ColourTell("green", "", " none")
    end

    ColourTell("green", "", " ]")
    Note()
    Note()
end

--
-- Print methods
--

function Message(str)
    AnsiNote(stylesToANSI(ColoursToStyles(string.format("\n@C[@GExits@C] %s@w\n", str))))
end
]]>
    </script>

    <timers>
        <timer
            name="timer_init_plugin"
            second="0.5"
            active_closed="y"
            script="init_plugin"
            enabled="y"
            send_to="12"></timer>
    </timers>

    <aliases>
        <alias
            match="^cexit (?<index>\d+)$"
            script="alias_cexit" 
            enabled="y"
            regexp="y"
            sequence="100"
            ignore_case="y"
            send_to="12"></alias>

        <alias enabled="y"
            regexp="y"
            match="^rexit set maxlength (?<max_length>.*)$"
            script="alias_set_max_length"
            sequence="100"
            send_to="12"></alias>

        <alias enabled="y"
            regexp="y"
            match="^rexit set underline$"
            script="alias_set_draw_underline"
            sequence="100"
            send_to="12"></alias>

        <alias enabled="y"
            regexp="y"
            match="^rexit set multiline$"
            script="alias_set_cexit_multiline"
            sequence="100"
            send_to="12"></alias>

        <alias enabled="y"
            regexp="y"
            match="^rexit set trimcommon$"
            script="alias_set_trim_common"
            sequence="100"
            send_to="12"></alias>

        <alias enabled="y"
            regexp="y"
            match="^rexit set cexit (?<dir>north|east|south|west|up|down) (?<cmd>.*)$"
            script="alias_set_cexit_dir"
            sequence="100"
            send_to="12"></alias>

        <alias enabled="y"
            regexp="y"
            match="^rexit options$"
            script="alias_options"
            sequence="100"
            send_to="12"></alias>

        <alias enabled="y"
            regexp="y"
            match="^rexit help$"
            script="alias_help"
            sequence="100"
            send_to="12"></alias>
    </aliases>

    <triggers>
        <trigger
            match="^\{exits}\[ Exits: (?<exits>.*) \]$"
            script="trigger_exits"
            ignore_case="n"
            enabled="y"
            regexp="y"
            sequence="100"
            keep_evaluating="y"
            omit_from_output="y"></trigger>

        <trigger
            match="^Tag option exits turned ON$"
            enabled="y"
            regexp="y"
            sequence="100"
            omit_from_output="y"></trigger>
    </triggers>

</muclient>
